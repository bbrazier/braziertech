AWSTemplateFormatVersion: "2010-09-09"
Description: Deployment of a highly available LAMP stack
Parameters:

  VpcId:
    Type: String
  Subnets:
    Type: CommaDelimitedList
  NodeCount:
    Type: String
  KeyName:
    Type: String
  ImageId:
    Type: String
  AccessIp:
    Type: String

Resources:

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Scheme: internet-facing
      SecurityGroups: 
        - Ref: SecurityGroup
      Subnets: 
        Ref: Subnets
      Tags: 
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-LoadBalancer"
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      Tags: 
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-TargetGroup"
      VpcId: 
        Ref: VpcId

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      DesiredCapacity: 
        Ref: NodeCount
      HealthCheckGracePeriod: 30
      HealthCheckType: EC2
      LaunchConfigurationName: 
        Ref: LaunchConfiguration
      MaxSize: 
        Ref: NodeCount
      MinSize: 
        Ref: NodeCount
      Tags: 
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-AutoScalingGroup"
          PropagateAtLaunch: True
      TargetGroupARNs: 
        - Ref: TargetGroup
      VPCZoneIdentifier: 
        Ref: Subnets

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      IamInstanceProfile: 
        Ref: IamProfile
      ImageId: 
        Ref: ImageId
      InstanceType: t2.small
      KeyName: 
        Ref: KeyName
      SecurityGroups: 
        - Ref: SecurityGroup
      UserData: 
        Fn::Base64: 
          Fn::Sub: |
            echo "Test" > /tmp/output.txt

            # Initial Config

            sudo apt update -y

            # Set Variables

            appname="application"

            # Install Apache

            sudo apt install apache2 -y
            sudo mkdir /var/www/application
            echo "<h1>$appname</h1>" > /var/www/html/index.html

            # Install Python

            sudo apt-get install python3.6 -y
            sudo apt install python3-pip -y
            python3 -m pip install boto3

            # Configure Application

            mkdir /opt/$appname

            echo "
            from flask import Flask
            app = Flask(__name__)
            @app.route("/")
            def hello():
                # dynamodb = boto3.resource('dynamodb')
                return "Hello world!"
            if __name__ == "__main__":
              app.run()
            " > /opt/$appname/app.py

            # Configure Apache

            echo "
            <VirtualHost *:80>
                 # Add machine's IP address (use ifconfig command)
                 ServerName 192.168.1.103
                 # Give an alias to to start your website url with
                 WSGIScriptAlias /testFlask /home/username/ExampleFlask/my_flask_app.wsgi
                 <Directory /home/username/ExampleFlask/ExampleFlask/>
                    # set permissions as per apache2.conf file
                        Options FollowSymLinks
                        AllowOverride None
                        Require all granted
                 </Directory>
                 ErrorLog ${APACHE_LOG_DIR}/error.log
                 LogLevel warn
                 CustomLog ${APACHE_LOG_DIR}/access.log combined
            </VirtualHost>
            " > /etc/apache2/sites-available/$appname.conf

            sudo a2ensite /etc/apache2/sites-available/$appname.conf

            service apache2 restart

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 
        Fn::Sub: "${AWS::StackName} Security Group"
      GroupName: 
        Fn::Sub: "${AWS::StackName}-SecurityGroup"
      SecurityGroupEgress: 
        - CidrIp: 
            Ref: AccessIp
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupIngress: 
        - CidrIp: 
            Ref: AccessIp
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      Tags: 
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-SecurityGroup"
      VpcId: 
        Ref: VpcId

  IamProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: 
        Fn::Sub: "${AWS::StackName}-IamProfile"
      Roles: 
        - Ref: IamRole

  IamRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - Ref: IamPolicy
      RoleName: 
        Fn::Sub: "${AWS::StackName}-IamRole"
      Tags: 
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-IamRole"

  IamPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: 
        Fn::Sub: "${AWS::StackName}-IamPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - Effect: "Allow"
          Action: "ec2:Read*"
          Resource:
            Fn::Sub: "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:*"

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: ID
          AttributeType: S
        - AttributeName: User
          AttributeType: S
      BillingMode: PAY_PER_REQUEST 
      KeySchema: 
        - AttributeName: ID
          KeyType: HASH
        - AttributeName: User
          KeyType: RANGE
      TableName: 
        Fn::Sub: "${AWS::StackName}-DynamoDBTable"
      Tags: 
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-DynamoDBTable"