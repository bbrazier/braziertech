AWSTemplateFormatVersion: "2010-09-09"
Description: Deployment of a highly available LAMP stack
Parameters:

  VpcId:
    Type: String
  Subnets:
    Type: CommaDelimitedList
  NodeCount:
    Type: String
  KeyName:
    Type: String
  ImageId:
    Type: String
  AccessIp:
    Type: String

Resources:

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      Scheme: internet-facing
      SecurityGroups: 
        - Ref: SecurityGroup
      Subnets: 
        Ref: Subnets
      Tags: 
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-LoadBalancer"
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port:
        80
      Tags: 
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-TargetGroup"
      VpcId: 
        Ref: VpcId

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      DesiredCapacity: 
        Ref: NodeCount
      HealthCheckGracePeriod: 30
      HealthCheckType: EC2
      LaunchConfigurationName: 
        Ref: LaunchConfiguration
      MaxSize: 
        Ref: NodeCount
      MinSize: 
        Ref: NodeCount
      Tags: 
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-AutoScalingGroup"
          PropagateAtLaunch: True
      TargetGroupARNs: 
        - Ref: TargetGroup
      VPCZoneIdentifier: 
        Ref: Subnets

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      BlockDeviceMappings: 
        - BlockDeviceMapping
      IamInstanceProfile: 
        Ref: IamProfile
      ImageId: 
        Ref: ImageId
      InstanceType: t2.small
      KeyName: 
        Ref: KeyName
      SecurityGroups: 
        - Ref: SecurityGroup
      UserData: 
        Fn::Base64: 
          Fn::Sub: |
            echo "Test" > /tmp/output.txt

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: 
        Fn::Sub: "${AWS::StackName} Security Group"
      GroupName: 
        Fn::Sub: "${AWS::StackName}-SecurityGroup"
      SecurityGroupEgress: 
        - CidrIp: 
            Ref: AccessIp
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      SecurityGroupIngress: 
        - CidrIp: AccessIp
          FromPort: 0
          IpProtocol: tcp
          ToPort: 65535
      Tags: 
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-SecurityGroup"
      VpcId: 
        Ref: VpcId

  IamProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: 
        Fn::Sub: "${AWS::StackName}-IamProfile"
      Roles: 
        - Ref: IamRole

  IamRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - Ref: IamPolicy
      RoleName: 
        Fn::Sub: "${AWS::StackName}-IamRole"
      Tags: 
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-IamRole"

  IamPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: 
        Fn::Sub: "${AWS::StackName}-IamPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - Effect: "Allow"
          Action: "ec2:Read*"
          Resource:
            Fn::Sub: "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:*"